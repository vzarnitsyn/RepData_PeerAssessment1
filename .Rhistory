x <- [1:121]
x <- 1:121
x[3:11]
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
if (x > 5){}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 0
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(2)
f=2
h(2)
d
z
h(2,2)
h(2,2,3)
x1 <- 3L
x1
x1*5
library(xslx)
install.packages("xlsx")
library(xlsx)
source(xlsx)
install.packages("rJava")
source(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-X:size)
select(cran,-X:-size)
select(cran,-(X:size))
select(cran,-size:-X))
select(cran,-size:-X)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is,na(c(3,5,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
bye()
source("http://bioconductor.org/biocLite.R")
library(rhdf5)
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
createh5createFile("example.h5")
created=h5createFile("example.h5")
created
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5","baa")
created=h5createGroup("example.h5","foo/baa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale")<-"liter"
h5write(B,"example.h5","foo/baa/B")
h5ls("example.h5")
df=data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"example.h5",df)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA=h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/baa/B")
readdf=h5read("example.h5","df")
readA
readB
readdf
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
? group_by()
? group_by
by_package<-group_by(cran,package)
by_package
summarise(by_package,mean(size))
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(by_package,count>679)
top_counts<-filter(by_package,by_package$count>679)
?filter
top_counts<-filter(pack_sum,count>679)
top_counts
head9top_counts,20
head(top_counts,20)
?desc
?arange
?arrange
arrange(top_counts,desc(count))
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,uniquet>465)
top_unique<-filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
?select
submit()
submit()
cran%>%
select(ip_id)%>%
print()
submit()
cran%>%
select(ip_id,country,package,size)%>%
print()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
student2
students2
gather(students2,key,value,-grade)
gather(students2,sex_class,value,-grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit
submit()
students3
submit()
?spread()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
rbind_list(passed,failed)
sat
?select
submit()
select(sat,-contaims("total"))
select(sat,-contains("total"))
sat2<-select(sat,-contains("total"))
sat3<-gather(sat2,part_sex,count,-score_range
)
sat3
separate(sat3,part_sex,c("part","sex"))
submit()
submit()
submit()
library(sqliter)
library(sqldf)
setwd("C:/Coursera/ExpDataAnalysis/Project_1")
myfile<-"household_power_consumption.txt"
mySql<-"SELECT Date,Time,Global_active_power from file WHERE Date='1/2/2007' OR date='2/2/2007'"
myData<-read.csv.sql(myfile,mySql,header=TRUE,sep=";")
Dtime<-strptime(paste(myData$Date,myData$Time),"%d/%m/%Y %H:%M:%OS")
png("plot1.png")
plot(Dtime,myData$Global_active_power,type="n",ylab="Global consumptions, MWt",xlab="Time")
lines(Dtime,myData$Global_active_power)
dev.off()
png("plot1.png")
plot(Dtime,myData$Global_active_power,type="n",ylab="Global Active Power (kilowatts)",xlab="")
lines(Dtime,myData$Global_active_power)
dev.off()
hist(mydata$Global_active_power)
hist(myData$Global_active_power)
hist(myData$Global_active_power,xlab="Global Active Power (kilowatts)",col="red")
png("plot1.png")
hist(myData$Global_active_power,xlab="Global Active Power (kilowatts)",col="red")
dev.off()
? hist
hist(myData$Global_active_power,xlab="Global Active Power (kilowatts)",col="red",main="Global Active Power")
png("plot1.png")
hist(myData$Global_active_power,xlab="Global Active Power (kilowatts)",col="red",main="Global Active Power")
dev.off()
png("plot2.png")
plot(Dtime,myData$Global_active_power,type="n",ylab="Global Active Power (kilowatts)",xlab="")
lines(Dtime,myData$Global_active_power)
dev.off()
setwd("C:/Coursera/Reproducible data analysis/Assignment1/Git")
setwd("C:/Coursera/Reproducible data analysis/Assignment1/Git")
setwd(~)
setwd("C:/Coursera/Reproducible data analysis/Assignment1/Git")
read.csv("activity.csv")
datafile<-read.csv("activity.csv")
str(datafile)
?tapply
tapply(datafile$steps,date,mean,median)
tapply(datafile$steps,datafile$date,mean,median)
tapply(datafile$steps,datafile$date,mean)
meandata<-tapply(datafile$steps,datafile$date,mean)
heads(meandata)
head(meandata)
?na
meandata<-tapply(datafile$steps,datafile$date,mean, na.rm=TRUE)
head(meandata)
meandata<-tapply(datafile$steps,datafile$date,mean,median, na.rm=TRUE)
meandata<-tapply(datafile$steps,datafile$date,median,na.rm=TRUE)
mediandata<-tapply(datafile$steps,datafile$date,median,na.rm=TRUE)
head(mediandata)
mediandata(1:10,)
mediandata[1:10,]
mediandata[,1:10]
mediandata[,1:3]
mediandata[,1:2]
mediandata[1:10,1:2]
str(mediandata)
mediandata(1:20)
mediandata[1:20]
max(mediandata)
max(mediandata,na.rm=TRUE)
